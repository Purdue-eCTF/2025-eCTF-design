"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
import json
import struct
from pathlib import Path

from loguru import logger

from .key_gen import generate_subscription_nodes
from .util import GlobalSecrets


def gen_subscription(
    secrets: bytes,
    device_id: int,
    start: int,
    end: int,
    channel: int,
) -> bytes:
    """Generate the contents of a subscription.

    The output of this will be passed to the Decoder using ectf25.tv.subscribe

    :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets
    :param device_id: Device ID of the Decoder
    :param start: First timestamp the subscription is valid for
    :param end: Last timestamp the subscription is valid for
    :param channel: Channel to enable
    """

    secrets: GlobalSecrets = GlobalSecrets.from_json(secrets.decode("ascii"))
    channel_keys = secrets.channels[channel]
    public_key = channel_keys.public_key_bytes()
    print(public_key)
    assert len(public_key) == 32
    print(list(secrets.subscription_key_for_decoder(device_id)))
    # TODO (sebastian): how do we insure subscription is only for device_id?
    # TODO (sebastian): what's going on with timestamps?
    key_nodes = generate_subscription_nodes(channel_keys.root_key, start, end)
    assert len(key_nodes) <= 128
    assert all(len(node.key) == 32 for node in key_nodes)
    data = (
        public_key
        + struct.pack("<QQII", start, end, channel, len(key_nodes))
        + b"".join([
            struct.pack("<QI", node.time_int(), node.depth) + node.key
            for node in key_nodes
        ])
    )

    print(f"{len(data) = }")
    return data


def parse_args():
    """Define and parse the command line arguments

    NOTE: Your design must not change this function
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="Force creation of subscription file, overwriting existing file",
    )
    parser.add_argument(
        "secrets_file",
        type=argparse.FileType("rb"),
        help="Path to the secrets file created by ectf25_design.gen_secrets",
    )
    parser.add_argument("subscription_file", type=Path, help="Subscription output")
    parser.add_argument(
        "device_id",
        type=lambda x: int(x, 0),
        help="Device ID of the update recipient.",
    )
    parser.add_argument(
        "start",
        type=lambda x: int(x, 0),
        help="Subscription start timestamp",
    )
    parser.add_argument("end", type=int, help="Subscription end timestamp")
    parser.add_argument("channel", type=int, help="Channel to subscribe to")
    return parser.parse_args()


def main():
    """Main function of gen_subscription

    You will likely not have to change this function
    """
    # Parse the command line arguments
    args = parse_args()

    subscription = gen_subscription(
        args.secrets_file.read(),
        args.device_id,
        args.start,
        args.end,
        args.channel,
    )

    # Print the generated subscription for your own debugging
    # Attackers will NOT have access to the output of this (although they may have
    # subscriptions in certain scenarios), but feel free to remove
    #
    # NOTE: Printing sensitive data is generally not good security practice
    logger.debug(f"Generated subscription: {subscription}")

    # Open the file, erroring if the file exists unless the --force arg is provided
    with open(args.subscription_file, "wb" if args.force else "xb") as f:
        f.write(subscription)

    # For your own debugging. Feel free to remove
    logger.success(f"Wrote subscription to {args.subscription_file.absolute()!s}")


if __name__ == "__main__":
    main()
